// ===== –ò–ú–ü–û–†–¢–´ =====
const { VK } = require('vk-io');
const { HearManager } = require('@vk-io/hear');
const { SessionManager } = require('@vk-io/session');
const { SceneManager, StepScene } = require('@vk-io/scenes');
const connectDB = require('./src/db/connection');
const Auction = require('./src/db/models/auction');
const User = require('./src/db/models/user'); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ User
const { isAdmin, delAuction } = require('./src/commands/auction');
const { getRemainingTime } = require('./src/utils/timeFormatter');
const { showProfile } = require('./src/commands/profile'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
const cron = require('node-cron');

// ===== VK –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
const vk = new VK({
    token: 'vk1.a.99cjuu9bSLjmCsDTtVMipdXYHXIMfUl72yjg9spVFIzSWxbt3_zeHznF9M2MPEJAGrkl8hFxL7ECLvSQcATpuRqGRL6Q2Fuy-zTJfpeQPwu_yMY74J__v_k2cyrjVhWxmj5mHIW00IyRgBtMtnnhd51QMZzEBq2rm8Pklnw0Txg5y8aL2rnwWF_4b8gGQSBh_BxTCgm-JhVyUC62f4k76w'
});

// ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î =====
connectDB();

// ===== –ú–ï–ù–ï–î–ñ–ï–†–´ =====
const hearManager = new HearManager();
const sessionManager = new SessionManager();
const sceneManager = new SceneManager();

// ===== –°–¶–ï–ù–´ =====
const addAuctionScene = new StepScene('add_auction', [
    async (ctx) => {
        if (ctx.scene.step.firstTime || !ctx.text) {
            return ctx.send('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:');
        }
        ctx.scene.state.lotName = ctx.text.trim();
        return ctx.scene.step.next();
    },
    async (ctx) => {
        if (ctx.scene.step.firstTime || !ctx.text) {
            return ctx.send('üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É (—á–∏—Å–ª–æ):');
        }
        const startPrice = parseInt(ctx.text, 10);
        if (isNaN(startPrice) || startPrice < 0) {
            await ctx.send('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).');
            return ctx.scene.step.reenter();
        }
        ctx.scene.state.startPrice = startPrice;
        return ctx.scene.step.next();
    },
    async (ctx) => {
        if (ctx.scene.step.firstTime || !ctx.text) {
            return ctx.send('üìà –í–≤–µ–¥–∏—Ç–µ —à–∞–≥ —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ > 0):');
        }
        const bidStep = parseInt(ctx.text, 10);
        if (isNaN(bidStep) || bidStep <= 0) {
            await ctx.send('‚ùå –®–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0.');
            return ctx.scene.step.reenter();
        }
        ctx.scene.state.bidStep = bidStep;
        return ctx.scene.step.next();
    },
    async (ctx) => {
        if (ctx.scene.step.firstTime || !ctx.text) {
            return ctx.send('‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ –º–∏–Ω—É—Ç—ã (—á–∏—Å–ª–æ > 0):');
        }
        const duration = parseInt(ctx.text, 10);
        if (isNaN(duration) || duration <= 0) {
            await ctx.send('‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0.');
            return ctx.scene.step.reenter();
        }

        try {
            const now = new Date();
            const endTime = new Date(now.getTime() + duration * 60000);

            const lastAuction = await Auction.findOne().sort({ numericId: -1 });
            const nextId = lastAuction && lastAuction.numericId ? lastAuction.numericId + 1 : 1;

            const auction = new Auction({
                numericId: nextId,
                lotName: ctx.scene.state.lotName,
                startPrice: ctx.scene.state.startPrice,
                currentPrice: ctx.scene.state.startPrice,
                bidStep: ctx.scene.state.bidStep,
                endTime,
                finished: false,
                currentWinner: null
            });

            await auction.save();
            const formattedId = String(auction.numericId).padStart(4, '0');

            await vk.api.messages.send({
                peer_id: 2000000005,
                message: `üéâ –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${formattedId} –∑–∞–ø—É—â–µ–Ω!
üõí –õ–æ—Ç: ${auction.lotName}
üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${auction.startPrice}
üìà –®–∞–≥ —Å—Ç–∞–≤–∫–∏: ${auction.bidStep}
‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω—É—Ç

–°—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: !addvalue ${auction.numericId} [—Å—É–º–º–∞]`,
                random_id: Date.now()
            });

            await ctx.send(`‚úÖ –ê—É–∫—Ü–∏–æ–Ω "${auction.lotName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: ‚Ññ${formattedId}`);
        } catch (err) {
            console.error(err);
            await ctx.send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞.');
        }
        return ctx.scene.leave();
    }
]);

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ !editauk —Ä–∞–±–æ—Ç–∞–ª–∞
const editAuctionScene = new StepScene('edit_auction', [
    async (ctx) => {
        let { auctionId } = ctx.scene.state;
        if (!auctionId) {
            if (ctx.scene.step.firstTime) {
                return ctx.send('üÜî –í–≤–µ–¥–∏—Ç–µ ID –∞—É–∫—Ü–∏–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
            }
            const id = parseInt(ctx.text, 10);
            if (isNaN(id)) {
                await ctx.send('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ).');
                return ctx.scene.step.reenter();
            }
            auctionId = id;
            ctx.scene.state.auctionId = id;
        }

        const auction = await Auction.findOne({ numericId: auctionId });
        if (!auction) {
            await ctx.send(`‚ùå –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${String(auctionId).padStart(4, '0')} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return ctx.scene.leave();
        }
        ctx.scene.state.auction = auction;

        const formattedId = String(auction.numericId).padStart(4, '0');
        await ctx.send(
            `üõ† –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞—É–∫—Ü–∏–æ–Ω ‚Ññ${formattedId} (${auction.lotName})
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:
1 ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ
2 ‚Äî –®–∞–≥ —Å—Ç–∞–≤–∫–∏
3 ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã, –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞)`
        );
        return ctx.scene.step.next();
    },
    async (ctx) => {
        if (!ctx.text) return ctx.scene.step.reenter();
        const choice = parseInt(ctx.text, 10);
        if (![1, 2, 3].includes(choice)) {
            await ctx.send('‚ùå –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.');
            return ctx.scene.step.reenter();
        }
        ctx.scene.state.choice = choice;
        if (choice === 1) await ctx.send('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:');
        if (choice === 2) await ctx.send('üìà –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–≥ —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ > 0):');
        if (choice === 3) await ctx.send('‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (—á–∏—Å–ª–æ > 0):');
        return ctx.scene.step.next();
    },
    async (ctx) => {
        const auction = ctx.scene.state.auction;
        const choice = ctx.scene.state.choice;

        try {
            if (choice === 1) {
                const name = (ctx.text || '').trim();
                if (!name) {
                    await ctx.send('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                    return ctx.scene.step.reenter();
                }
                auction.lotName = name;
            } else if (choice === 2) {
                const step = parseInt(ctx.text, 10);
                if (isNaN(step) || step <= 0) {
                    await ctx.send('‚ùå –®–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0.');
                    return ctx.scene.step.reenter();
                }
                auction.bidStep = step;
            } else if (choice === 3) {
                const minutes = parseInt(ctx.text, 10);
                if (isNaN(minutes) || minutes <= 0) {
                    await ctx.send('‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0.');
                    return ctx.scene.step.reenter();
                }
                const now = new Date();
                auction.endTime = new Date(now.getTime() + minutes * 60000);
            }

            await auction.save();
            const formattedId = String(auction.numericId).padStart(4, '0');
            await ctx.send(`‚úÖ –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${formattedId} –æ–±–Ω–æ–≤–ª—ë–Ω.`);
        } catch (e) {
            console.error(e);
            await ctx.send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞.');
        }
        return ctx.scene.leave();
    }
]);

sceneManager.addScenes([addAuctionScene, editAuctionScene]);

// ===== MIDDLEWARES =====
vk.updates.use(sessionManager.middleware);
vk.updates.use(sceneManager.middleware);
vk.updates.use(sceneManager.middlewareIntercept);
vk.updates.use(hearManager.middleware);

// ===== –ö–û–ú–ê–ù–î–´ =====
hearManager.hear(/^!profile$/i, async (ctx) => {
    await showProfile(ctx);
});

hearManager.hear(/^!addauk$/i, async (ctx) => {
    if (!await isAdmin(ctx.senderId)) return ctx.send('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    return ctx.scene.enter('add_auction');
});

hearManager.hear(/^!delauk (\d+)$/i, async (ctx) => {
    if (!await isAdmin(ctx.senderId)) return ctx.send('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
    const auctionId = parseInt(ctx.$match[1], 10);
    await delAuction(ctx, auctionId);
});

hearManager.hear(/^!addvalue (\d+) (\d+)$/i, async (ctx) => {
    const auctionId = parseInt(ctx.$match[1], 10);
    const newPrice = parseInt(ctx.$match[2], 10);

    const auction = await Auction.findOne({ numericId: auctionId });
    if (!auction) return ctx.send(`‚ùå –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${String(auctionId).padStart(4, '0')} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    if (auction.finished) return ctx.send(`‚ùå –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${String(auctionId).padStart(4, '0')} —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.`);

    if (isNaN(newPrice) || newPrice < auction.currentPrice + auction.bidStep) {
        return ctx.send(`‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π (${auction.currentPrice}) –Ω–∞ —à–∞–≥ (${auction.bidStep}).`);
    }

    try {
        auction.currentPrice = newPrice;
        auction.currentWinner = ctx.senderId;
        await auction.save();

        const formattedId = String(auction.numericId).padStart(4, '0');
        const remainingTime = getRemainingTime(auction.endTime);

        await vk.api.messages.send({
            peer_id: 2000000005,
            message: `üí∏ –£—á–∞—Å—Ç–Ω–∏–∫ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω ‚Ññ${formattedId}: ${newPrice} –º–æ–Ω–µ—Ç.
‚è∞ –õ–æ—Ç –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑: ${remainingTime}`,
            random_id: Date.now()
        });

        await ctx.send(`‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ ‚Ññ${formattedId}.`);
    } catch (err) {
        console.error(err);
        await ctx.send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ.');
    }
});

hearManager.hear(/^!cancellation (\d+)$/i, async (ctx) => {
    const auctionId = parseInt(ctx.$match[1], 10);
    const auction = await Auction.findOne({ numericId: auctionId });

    if (!auction) return ctx.send(`‚ùå –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${String(auctionId).padStart(4, '0')} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    if (auction.currentWinner?.toString() !== ctx.senderId.toString()) return ctx.send('‚ùå –í—ã –Ω–µ –ª–∏–¥–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞.');

    auction.currentWinner = null;
    auction.currentPrice = auction.startPrice;
    await auction.save();

    const formattedId = String(auction.numericId).padStart(4, '0');
    await vk.api.messages.send({
        peer_id: 2000000005,
        message: `‚ùå –õ–∏–¥–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ ‚Ññ${formattedId} –æ—Ç–º–µ–Ω–∏–ª —Å—Ç–∞–≤–∫—É. –¶–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫ ${auction.startPrice}.`,
        random_id: Date.now()
    });

    await ctx.send(`‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ ‚Ññ${formattedId} –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
});

hearManager.hear(/^!editauk (\d+)$/i, async (ctx) => {
    if (!await isAdmin(ctx.senderId)) return ctx.send('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã.');
    const auctionId = parseInt(ctx.$match[1], 10);
    return ctx.scene.enter('edit_auction', { auctionId });
});

// ===== –ö–†–û–ù-–ü–†–û–í–ï–†–ö–ê –ê–£–ö–¶–ò–û–ù–û–í =====
cron.schedule('* * * * *', async () => {
    try {
        const now = new Date();
        const auctions = await Auction.find({ finished: false, endTime: { $lte: now } });

        for (const auction of auctions) {
            auction.finished = true;
            await auction.save();

            const formattedId = String(auction.numericId).padStart(4, '0');

            if (auction.currentWinner) {
                const userInfo = await vk.api.users.get({ user_ids: auction.currentWinner });
                const userName = `${userInfo[0].first_name} ${userInfo[0].last_name}`;

                await vk.api.messages.send({
                    peer_id: 2000000005,
                    message: `üèÜ –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${formattedId} –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${userName} —Å–æ —Å—Ç–∞–≤–∫–æ–π ${auction.currentPrice} –º–æ–Ω–µ—Ç.`,
                    random_id: Date.now()
                });
            } else {
                await vk.api.messages.send({
                    peer_id: 2000000005,
                    message: `‚ö†Ô∏è –ê—É–∫—Ü–∏–æ–Ω ‚Ññ${formattedId} –∑–∞–≤–µ—Ä—à—ë–Ω! –°—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ.`,
                    random_id: Date.now()
                });
            }
        }
    } catch (e) {
        console.error('Cron error:', e);
    }
});

// ===== –ó–ê–ü–£–°–ö =====
vk.updates.start().catch(console.error);
console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');